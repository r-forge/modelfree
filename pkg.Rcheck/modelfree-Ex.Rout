
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "modelfree"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('modelfree')
Loading required package: PolynomF
Loading required package: SparseM
Package SparseM (0.96) loaded.
	   To cite, see citation("SparseM")


Attaching package: 'SparseM'

The following object(s) are masked from 'package:base':

    backsolve

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bandwidth_bootstrap")
> ### * bandwidth_bootstrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bandwidth_bootstrap
> ### Title: Bootstrap estimate of bandwidth
> ### Aliases: bandwidth_bootstrap
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data("01_Miranda")
> h<- bandwidth_bootstrap( example01$r, example01$m, example01$x, c( 0.1, 10 ), 10 )
> 
> 
> 
> cleanEx()
> nameEx("bandwidth_cross_validation")
> ### * bandwidth_cross_validation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bandwidth_cross_validation
> ### Title: Cross-validation estimate of bandwidth
> ### Aliases: bandwidth_cross_validation
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data("01_Miranda")
> h<- bandwidth_cross_validation( example01$r, example01$m, example01$x, c( 0.1, 10 ) )
> 
> 
> 
> cleanEx()
> nameEx("bandwidth_plugin")
> ### * bandwidth_plugin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bandwidth_plugin
> ### Title: Plug in estimation of Bandwidth
> ### Aliases: bandwidth_plugin
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data("01_Miranda")
> h<-bandwidth_plugin( example01$r, example01$m, example01$x )
> 
> 
> 
> cleanEx()
> nameEx("binom_g")
> ### * binom_g
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binom_g
> ### Title: Psychometric function with guessing rate
> ### Aliases: binom_g
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> value <-binom_g( example01$r, example01$m, example01$x, "logit", 1, 2, 0.01 )
> 
> 
> 
> cleanEx()
> nameEx("binom_gl")
> ### * binom_gl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binom_gl
> ### Title: Psychometric function with guessing and lapsing rates
> ### Aliases: binom_gl
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" );
> value <-binom_gl( example01$r, example01$m, example01$x, "logit", 1, 2, c( 0.01, 0.01 ) );
> 
> 
> 
> cleanEx()
> nameEx("binom_l")
> ### * binom_l
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binom_l
> ### Title: Psychometric function with lapsing rate
> ### Aliases: binom_l
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> value <-binom_l( example01$r, example01$m, example01$x, "logit", 1, 2, 0.01 )
> 
> 
> 
> cleanEx()
> nameEx("binom_lims")
> ### * binom_lims
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binom_lims
> ### Title: Psychometric function with guessing and lapsing rates
> ### Aliases: binom_lims
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> value <-binom_lims( example01$r, example01$m, example01$x )
> 
> 
> 
> cleanEx()
> nameEx("binom_revweib")
> ### * binom_revweib
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binom_revweib
> ### Title: Psychometric function fitting for reverse Weibull link function
> ### Aliases: binom_revweib
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> value <- binom_revweib( example01$r, example01$m, example01$x )
> 
> 
> 
> cleanEx()
> nameEx("binom_weib")
> ### * binom_weib
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binom_weib
> ### Title: Psychometric function fitting for Weibull link function
> ### Aliases: binom_weib
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> value <- binom_revweib( example01$r, example01$m, example01$x )
> 
> 
> 
> cleanEx()
> nameEx("binomfit_lims")
> ### * binomfit_lims
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binomfit_lims
> ### Title: Generalized linear model fit with guessing and lapsing rates
> ### Aliases: binomfit_lims
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> value <- binomfit_lims( example01$r, example01$m, example01$x )
> 
> 
> 
> cleanEx()
> nameEx("bootstrap_ci_sl")
> ### * bootstrap_ci_sl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bootstrap_ci_sl
> ### Title: Bootstrap estimate of confidence interval for slope estimation
> ### Aliases: bootstrap_ci_sl
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> bwd <- 0.2959
> value <- bootstrap_ci_sl( 0.5, example01$r, example01$m, example01$x, 10, bwd )
Warning in bootstrap_ci_sl(0.5, example01$r, example01$m, example01$x, 10,  :
  number of bootstrap should be larger than 1000
 otherwise results might be unreliable
> 
> 
> 
> cleanEx()
> nameEx("bootstrap_ci_th")
> ### * bootstrap_ci_th
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bootstrap_ci_th
> ### Title: Bootstrap estimate of confidence interval for threshold
> ###   estimation
> ### Aliases: bootstrap_ci_th
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> bwd <- 0.2959;
> value <- bootstrap_ci_th( 0.5, example01$r, example01$m, example01$x, 10, bwd );
Warning in bootstrap_ci_th(0.5, example01$r, example01$m, example01$x, 10,  :
  number of bootstrap should be larger than 1000
 otherwise results might be unreliable
> 
> 
> 
> cleanEx()
> nameEx("bootstrap_sd_sl")
> ### * bootstrap_sd_sl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bootstrap_sd_sl
> ### Title: Bootstrap estimate the standard deviation of slope estimation
> ### Aliases: bootstrap_sd_sl
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> bwd <- 0.2959
> value <- bootstrap_sd_sl( 0.5, example01$r, example01$m, example01$x, 10, bwd )
Warning in bootstrap_sd_sl(0.5, example01$r, example01$m, example01$x, 10,  :
  number of bootstrap should be larger than 200
 otherwise results might be unreliable
> 
> 
> 
> cleanEx()
> nameEx("bootstrap_sd_th")
> ### * bootstrap_sd_th
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bootstrap_sd_th
> ### Title: Bootstrap estimate the standard deviation of threshold
> ###   estimation
> ### Aliases: bootstrap_sd_th
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> bwd <- 0.2959
> value <- bootstrap_sd_th( 0.5, example01$r, example01$m, example01$x, 10, bwd )
Warning in bootstrap_sd_th(0.5, example01$r, example01$m, example01$x, 10,  :
  number of bootstrap should be larger than 200
 otherwise results might be unreliable
> 
> 
> 
> cleanEx()
> nameEx("comploglog_link")
> ### * comploglog_link
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comploglog_link
> ### Title: Complementary log-log link function with guessing and lapsing
> ###   rates
> ### Aliases: comploglog_link
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-comploglog_link( 0.1, 0.1 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("comploglog_link_private")
> ### * comploglog_link_private
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comploglog_link_private
> ### Title: Complementary log-log link function with guessing and lapsing
> ###   rates
> ### Aliases: comploglog_link_private
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-comploglog_link_private( 0.1, 0.1 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("deviance2")
> ### * deviance2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deviance2
> ### Title: Deviance between data and fitted function
> ### Aliases: deviance2
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> h = 0.2959
> fit <- locglmfit( example01$x, example01$r, example01$m, example01$x, h )
> Dev <- deviance2( example01$r, example01$m, fit$fitval )
> 
> 
> 
> cleanEx()
> nameEx("locglmfit")
> ### * locglmfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: locglmfit
> ### Title: Local generalized linear fitting
> ### Aliases: locglmfit
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> xnew = 1.2 * (0:99)/99+0.1
> h <- 0.2959
> fit <- locglmfit( xnew, example01$r, example01$m, example01$x, h )
> 
> 
> 
> cleanEx()
> nameEx("locglmfit_private")
> ### * locglmfit_private
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: locglmfit_private
> ### Title: Local generalized linear fitting with usual (non-sparse)
> ###   matrices
> ### Aliases: locglmfit_private
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> xnew = 1.2 * (0:99)/99+0.1
> h <- 0.2959
> fit <- locglmfit_private( xnew,  example01$r,  example01$m, example01$x, h, FALSE, "logit_link", 0, 0, 2, 1, "dnorm", 50, 1e-6)
> 
> 
> 
> cleanEx()
> nameEx("locglmfit_sparse_private")
> ### * locglmfit_sparse_private
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: locglmfit_sparse_private
> ### Title: Local generalized linear fitting with sparse matrices
> ### Aliases: locglmfit_sparse_private
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> xnew = 1.2 * (0:99)/99+0.1
> h <- 0.2959
> fit <- locglmfit_sparse_private( xnew,  example01$r,  example01$m, example01$x, h, FALSE, "logit_link", 0, 0, 2, 1, "dnorm", 50, 1e-6)
> 
> 
> 
> cleanEx()
> nameEx("logit_link")
> ### * logit_link
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logit_link
> ### Title: Logit link function with guessing and lapsing rates
> ### Aliases: logit_link
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-logit_link( 0.1, 0.1 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("logit_link_private")
> ### * logit_link_private
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logit_link_private
> ### Title: Logit link function with guessing and lapsing rates
> ### Aliases: logit_link_private
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-logit_link_private( 0.1, 0.1 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("loglog_link")
> ### * loglog_link
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loglog_link
> ### Title: Log-log link function with guessing and lapsing rates
> ### Aliases: loglog_link
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-loglog_link( 0.1, 0.1 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("loglog_link_private")
> ### * loglog_link_private
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loglog_link_private
> ### Title: Log-log link function with guessing and lapsing rates
> ### Aliases: loglog_link_private
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-loglog_link_private( 0.1, 0.1 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("probit_link")
> ### * probit_link
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: probit_link
> ### Title: Probit link function with guessing and lapsing rates
> ### Aliases: probit_link
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-probit_link( 0.1, 0.1 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("probit_link_private")
> ### * probit_link_private
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: probit_link_private
> ### Title: Probit link function with guessing and lapsing rates
> ### Aliases: probit_link_private
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-probit_link_private( 0.1, 0.1 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("revweibull_link")
> ### * revweibull_link
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: revweibull_link
> ### Title: Reverse Weibull link function with guessing and lapsing rates
> ### Aliases: revweibull_link
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-revweibull_link( 20 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("revweibull_link_private")
> ### * revweibull_link_private
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: revweibull_link_private
> ### Title: Reverse Weibull link function with guessing and lapsing rates
> ### Aliases: revweibull_link_private
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-revweibull_link_private( 20, 0, 0 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("threshold_slope")
> ### * threshold_slope
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: threshold_slope
> ### Title: Threshold and slope of estimated psychometric function
> ### Aliases: threshold_slope
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> xnew = 1.2 * (0:999)/999+0.1
> h = 0.2959
> fit <- locglmfit( xnew, example01$r, example01$m, example01$x, h )
> value <- threshold_slope( fit$pfit , xnew )
> 
> 
> 
> cleanEx()
> nameEx("weibull_link")
> ### * weibull_link
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weibull_link
> ### Title: Weibull link function with guessing and lapsing rates
> ### Aliases: weibull_link
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-weibull_link( 20 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
> 
> 
> 
> cleanEx()
> nameEx("weibull_link_private")
> ### * weibull_link_private
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weibull_link_private
> ### Title: Weibull link function with guessing and lapsing rates
> ### Aliases: weibull_link_private
> ### Keywords: nonparametric models regression nonlinear
> 
> ### ** Examples
> 
> data( "01_Miranda" )
> x <- example01$x
> r <- example01$r
> m <- example01$m
> glmdata <- data.frame( cbind( r/m ,m , x ) )
> names( glmdata ) <- c( "resp", "m", "x" )
> glmformula <- c( "resp ~ x" )
> userlink<-weibull_link_private( 20, 0, 0 )
> fit <- glm( glmformula, data = glmdata, weights = m, family = binomial( userlink ) )
[1] "FL"
 [1] 0.9042305 0.9042305 0.8850724 0.9219160 0.9344727 0.9018778 0.9184212
 [8] 0.9481584 1.0164658 1.0384867
[1] "FI"
 [1] 0.12500000 0.12500000 0.08333333 0.17857143 0.22727273 0.11904762
 [7] 0.16666667 0.29166667 0.75000000 0.88095238
[1] "FD"
 [1] 0.3869526 0.3869526 0.5548318 0.2852755 0.2345192 0.4038420 0.3022422
 [8] 0.1940863 0.1466450 0.2049422
[1] "FI"
 [1] 0.02675268 0.03975560 0.05843197 0.08486066 0.12160124 0.17157290
 [7] 0.23768901 0.42498333 0.66743523 0.88243711
[1] "FD"
 [1] 1.5818542 1.0935016 0.7663764 0.5458248 0.3963964 0.2949641 0.2264162
 [8] 0.1525580 0.1372226 0.2063745
[1] "FI"
 [1] 0.01809378 0.02813197 0.04320035 0.06546789 0.09777347 0.14359680
 [7] 0.20676073 0.39662389 0.65704276 0.88986841
[1] "FD"
 [1] 2.2828964 1.5092111 1.0124173 0.6906530 0.4807301 0.3431147 0.2529357
 [8] 0.1585185 0.1366966 0.2141007
[1] "FI"
 [1] 0.01749386 0.02731038 0.04210419 0.06405030 0.09600989 0.14150996
 [7] 0.20445293 0.39462045 0.65667902 0.89088679
[1] "FD"
 [1] 2.3564486 1.5516196 1.0368137 0.7046000 0.4886063 0.3474653 0.2552441
 [8] 0.1589850 0.1366804 0.2152379
[1] "FI"
 [1] 0.01749404 0.02731105 0.04210578 0.06405353 0.09601581 0.14152006
 [7] 0.20446912 0.39465422 0.65672737 0.89092324
[1] "FD"
 [1] 2.3564263 1.5515842 1.0367773 0.7045676 0.4885794 0.3474440 0.2552277
 [8] 0.1589771 0.1366826 0.2152790
[1] "FI"
 [1] 0.01749390 0.02731088 0.04210557 0.06405329 0.09601556 0.14151986
 [7] 0.20446903 0.39465469 0.65672861 0.89092447
[1] "FD"
 [1] 2.3564430 1.5515932 1.0367820 0.7045699 0.4885805 0.3474444 0.2552278
 [8] 0.1589770 0.1366826 0.2152804
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  136.49 0.85 138.55 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
